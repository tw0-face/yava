apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: networks.yava.com
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: yava.com/v1alpha1
    kind: Network
  mode: Pipeline
  pipeline:
    - step: go-templating
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{ $params := .observed.composite.resource.spec.parameters }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPC
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
              annotations:
                {{ setResourceNameAnnotation ("vpc") }}
            spec:
              forProvider:
                cidrBlock: {{ $params.vpcCidrBlock }}
                enableDnsHostnames: true
                enableDnsSupport: true
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}

            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: InternetGateway
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
              annotations:
                {{ setResourceNameAnnotation ("igw") }}
            spec:
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}

            {{ $region := $params.region }}
            {{ $deletionPolicy := $params.deletionPolicy | default "Delete" }}

            {{- range $i, $subnet := $params.subnets }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              labels:
                  zone: {{ $subnet.availabilityZone }}
                  {{- if eq $subnet.type "private" }}
                  access: private
                  {{- else }}
                  access: public
                  {{- end }}
                  networks.aws.platform.upbound.io/network-id: {{ $params.id }}
              annotations:
                {{ setResourceNameAnnotation (printf "subnet-%s-%s" $subnet.availabilityZone $subnet.type) }}
            spec:
              forProvider:
                cidrBlock: {{ $subnet.cidrBlock }}
                {{ if eq $subnet.type "public" }}
                mapPublicIpOnLaunch: true
                {{ end }}
                tags:
                {{- if eq $subnet.type "private" }}
                  kubernetes.io/role/internal-elb: "1"
                {{- else }}
                  kubernetes.io/role/elb: "1"
                {{- end }}
                {{- if eq $subnet.type "public" }}
                  networks.aws.platform.upbound.io/network-id: {{ $params.id }}
                {{- end }}
                region: {{ $region }}
                vpcIdSelector:
                  matchControllerRef: true
                availabilityZone: {{ $subnet.availabilityZone }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $deletionPolicy }}
            {{- end }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
                access: public
              annotations:
                {{ setResourceNameAnnotation ("rt") }}
            spec:
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
              annotations:
                {{ setResourceNameAnnotation ("route") }}
            spec:
              forProvider:
                destinationCidrBlock: 0.0.0.0/0
                gatewayIdSelector:
                  matchControllerRef: true
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    access: public
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: MainRouteTableAssociation
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
              annotations:
                {{ setResourceNameAnnotation ("mrt") }}
            spec:
              forProvider:
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    access: public
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            {{- range $i, $subnet := $params.subnets }}
            {{- if and $subnet.nat (eq $subnet.type "public") }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: EIP
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
                zone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "eip-%s" $subnet.availabilityZone) }}
            spec:
              forProvider:
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: NATGateway
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
                zone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "natgw-%s" $subnet.availabilityZone) }}
            spec:
              forProvider:
                region: {{ $params.region }}
                allocationIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    zone: {{ $subnet.availabilityZone }}
                subnetIdSelector:
                  matchLabels:
                    access: public
                    zone: {{ $subnet.availabilityZone }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
                access: private
                zone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "rt-private-%s" $subnet.availabilityZone) }}
            spec:
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
                access: private
                zone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "route-private-%s" $subnet.availabilityZone) }}
            spec:
              forProvider:
                destinationCidrBlock: 0.0.0.0/0
                natGatewayIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    zone: {{ $subnet.availabilityZone }}
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    access: private
                    zone: {{ $subnet.availabilityZone }}
                region: {{ $params.region }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTableAssociation
            metadata:
              labels:
                networks.aws.platform.upbound.io/network-id: {{ $params.id }}
              annotations:
                {{ setResourceNameAnnotation (printf "rta-%s-private" $subnet.availabilityZone) }}
            spec:
              forProvider:
                region: {{ $params.region }}
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    access: private
                    zone: {{ $subnet.availabilityZone }}
                subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    access: private
                    zone: {{ $subnet.availabilityZone }}
              providerConfigRef:
                name: {{ $params.providerConfigName }}
              deletionPolicy: {{ $params.deletionPolicy | default "Delete" }}
            {{- end }}
            {{- end }}
            ---
            apiVersion: {{ .observed.composite.resource.apiVersion }}
            kind: {{ .observed.composite.resource.kind }}
            status:
              {{- $vpcId := dig "resources" "vpc" "resource" "status" "atProvider" "id" "" $.observed }}
              {{- if $vpcId }}
              vpcId: {{ $vpcId }}
              {{- end }}

              {{- $subnetIds := list }}
              {{- range $i, $subnet := $params.subnets }}
              {{- $subnetId := dig "resources" (printf "subnet-%s-%s" $subnet.availabilityZone $subnet.type) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $subnetId }}
              {{- $subnetIds = append $subnetIds $subnetId }}
              {{- end }}
              {{- end }}
              {{- if $subnetIds }}
              subnetIds:
                {{- range $id := $subnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

              {{- $publicSubnetIds := list }}
              {{- range $i, $subnet := $params.subnets }}
              {{- if eq $subnet.type "public" }}
              {{- $publicSubnetId := dig "resources" (printf "subnet-%s-%s" $subnet.availabilityZone $subnet.type) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $publicSubnetId }}
              {{- $publicSubnetIds = append $publicSubnetIds $publicSubnetId }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if $publicSubnetIds }}
              publicSubnetIds:
                {{- range $id := $publicSubnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

              {{- $privateSubnetIds := list }}
              {{- range $i, $subnet := $params.subnets }}
              {{- if eq $subnet.type "private" }}
              {{- $privateSubnetId := dig "resources" (printf "subnet-%s-%s" $subnet.availabilityZone $subnet.type) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $privateSubnetId }}
              {{- $privateSubnetIds = append $privateSubnetIds $privateSubnetId }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if $privateSubnetIds }}
              privateSubnetIds:
                {{- range $id := $privateSubnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
